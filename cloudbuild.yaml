# Cloud Build configuration for GKE deployment with Artifact Registry
# This builds the Docker image and pushes it to Artifact Registry

steps:
  # Step 1: Build and package the application using Maven
  - name: 'maven:3.9-eclipse-temurin-17'
    id: 'maven-build'
    entrypoint: mvn
    args: ['clean', 'package', '-DskipTests']

  # Step 2: Build Docker image and tag for Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-build'
    args: [
      'build',
      '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:$SHORT_SHA',
      '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:latest',
      '.'
    ]

  # Step 3: Push image with commit SHA tag to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-push-sha'
    args: ['push', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:$SHORT_SHA']

  # Step 4: Push image with latest tag to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-push-latest'
    args: ['push', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:latest']

  # Step 5: Get GKE credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'get-gke-credentials'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - '${_GKE_CLUSTER_NAME}'
      - '--region=${_GKE_REGION}'
      - '--project=$PROJECT_ID'

  # Step 6: Process kustomization.yaml with variable substitution
  - name: 'ubuntu'
    id: 'process-kustomization'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        sed -e "s|PROJECT_ID|$PROJECT_ID|g" \
            -e "s|SHORT_SHA|$SHORT_SHA|g" \
            -e "s|REGION|${_REGION}|g" \
            -e "s|ARTIFACT_REGISTRY_REPO|${_ARTIFACT_REGISTRY_REPO}|g" \
            -e "s|IMAGE_NAME|${_IMAGE_NAME}|g" \
            k8s/kustomization.yaml > k8s/kustomization-processed.yaml
        
        # Copy processed kustomization back
        cp k8s/kustomization-processed.yaml k8s/kustomization.yaml

  # Step 7: Deploy with Kustomize
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'deploy-with-kustomize'
    args: ['apply', '-k', 'k8s/']
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_GKE_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER_NAME}'

  # Step 8: Wait for rollout to complete
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'wait-for-rollout'
    args:
      - 'rollout'
      - 'status'
      - 'deployment/dynamic-loadbalancer'
      - '--timeout=5m'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_GKE_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER_NAME}'

# Substitution variables
substitutions:
  _REGION: 'europe-west1'
  _ARTIFACT_REGISTRY_REPO: 'loadbalancer-sandbox'
  _IMAGE_NAME: 'dynamic-loadbalancer'
  _GKE_CLUSTER_NAME: 'autopilot-cluster-1'
  _GKE_REGION: 'europe-west1'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitutionOption: 'ALLOW_LOOSE'

# Images to be pushed (for Cloud Build dashboard)
images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:$SHORT_SHA'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:latest'

timeout: 1200s